[{"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\reportWebVitals.js":"1","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\App.js":"2","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\Login\\index.js":"3","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\Register\\index.js":"4","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\components\\MenuEnade\\index.js":"5","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\Aluno\\index.js":"6","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\routes.js":"7","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\index.js":"8","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\service\\api.js":"9","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\NewQuestion\\index.js":"10","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\Professor\\index.js":"11","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\components\\HeaderEnade\\index.js":"12","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\Prova\\index.js":"13","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\Prova\\enums.js":"14","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\RelacaoAlunos\\index.js":"15","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\components\\If\\index.js":"16"},{"size":362,"mtime":1606338370451,"results":"17","hashOfConfig":"18"},{"size":162,"mtime":1606432517233,"results":"19","hashOfConfig":"18"},{"size":859,"mtime":1606922058167,"results":"20","hashOfConfig":"18"},{"size":2508,"mtime":1606517661201,"results":"21","hashOfConfig":"18"},{"size":2392,"mtime":1606943319384,"results":"22","hashOfConfig":"18"},{"size":1717,"mtime":1606942712632,"results":"23","hashOfConfig":"18"},{"size":1010,"mtime":1606943130112,"results":"24","hashOfConfig":"18"},{"size":543,"mtime":1606429809160,"results":"25","hashOfConfig":"18"},{"size":121,"mtime":1606436340010,"results":"26","hashOfConfig":"18"},{"size":3901,"mtime":1606686757090,"results":"27","hashOfConfig":"18"},{"size":15019,"mtime":1606928708201,"results":"28","hashOfConfig":"18"},{"size":409,"mtime":1606685693441,"results":"29","hashOfConfig":"18"},{"size":6631,"mtime":1606928324769,"results":"30","hashOfConfig":"18"},{"size":213,"mtime":1606928402193,"results":"31","hashOfConfig":"18"},{"size":6020,"mtime":1606954995485,"results":"32","hashOfConfig":"18"},{"size":123,"mtime":1606517219403,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8a8ctt",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\reportWebVitals.js",[],"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\App.js",[],"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\Login\\index.js",[],["69","70"],"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\Register\\index.js",[],"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\components\\MenuEnade\\index.js",["71","72","73","74"],"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\Aluno\\index.js",[],"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\routes.js",[],"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\index.js",[],["75","76"],"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\service\\api.js",[],"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\NewQuestion\\index.js",["77"],"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\Professor\\index.js",["78","79","80","81"],"import React, { useState, useEffect } from 'react';\r\nimport MenuEnade from '../../components/MenuEnade';\r\nimport { Button, Card, Checkbox, Modal, Select, TextArea, Input, Icon } from 'semantic-ui-react'\r\nimport api from '../../service/api';\r\nimport If from '../../components/If';\r\nimport './styles.css';\r\nimport HeaderEnade from '../../components/HeaderEnade';\r\nimport format from 'date-fns/format';\r\n\r\n\r\nfunction Professor() {\r\n    const [alternativaA, setAlternativaA] = useState('');\r\n    const [alternativaB, setAlternativaB] = useState('');\r\n    const [alternativaC, setAlternativaC] = useState('');\r\n    const [alternativaD, setAlternativaD] = useState('');\r\n    const [alternativaE, setAlternativaE] = useState('');\r\n    const [correta, setCorreta] = useState('');\r\n    const [descricao, setDescricao] = useState('');\r\n    const [estadoQuestao, setEstadoQuestao] = useState(true);\r\n    const [idTpQuestao, setIdTpQuestao] = useState(1);\r\n    const [editing, setEditing] = useState(false);\r\n    const [questionEditing, setQuestionEditing] = useState('')\r\n\r\n    const [questoes, setQuestoes] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    let questoesProva = [];\r\n\r\n    useEffect(() => {\r\n        api.get('questao/listar-all').then(response => {\r\n            setQuestoes(response.data);\r\n        })\r\n    }, []);\r\n\r\n    const tipoOptions = [\r\n        { value: 1, text: 'Discursivas (formação geral)' },\r\n        { value: 2, text: 'Objetivas (formação geral)' },\r\n        { value: 3, text: 'Discursivas (componente específico)' },\r\n        { value: 4, text: 'objetivas (componente específico)' }        \r\n    ]\r\n\r\n    const tipoOptionsResp = [\r\n        { value: 'alternativaA', text: 'Alternativa A' },\r\n        { value: 'alternativaB', text: 'Alternativa B' },\r\n        { value: 'alternativaC', text: 'Alternativa C' },\r\n        { value: 'alternativaD', text: 'Alternativa D' },     \r\n        { value: 'alternativaE', text: 'Alternativa E' },  \r\n    ]\r\n\r\n\r\n    async function handleAdd(e) {\r\n        const data = {\r\n            alternativaA,\r\n            alternativaB,\r\n            alternativaC,\r\n            alternativaD,\r\n            alternativaE,\r\n            correta,\r\n            descricao,\r\n            estadoQuestao,\r\n            idTpQuestao\r\n        }\r\n\r\n        try {\r\n            const response = await api.post('questao/cadastrar', data);\r\n            console.log('resp', response);\r\n            alert(`Questão cadastrada com sucesso!`);\r\n\r\n            api.get('questao/listar-all').then(response => {\r\n                setQuestoes(response.data);\r\n            });\r\n            setOpen(false);\r\n        } catch (err) {\r\n            alert('Erro no cadastro, tente novamente.');\r\n        }\r\n    }\r\n\r\n\r\n    async function handleEdit(questao) {        \r\n        const data = {\r\n            alternativaA,\r\n            alternativaB,\r\n            alternativaC,\r\n            alternativaD,\r\n            alternativaE,\r\n            correta,\r\n            descricao,\r\n            estadoQuestao,\r\n            idTpQuestao\r\n        }\r\n\r\n        try {\r\n            const response = await api.put(`questao/atualizar/${questao.idQuestao}`, data);\r\n            console.log('resp', response);\r\n            alert(`Questão cadastrada com sucesso!`);\r\n\r\n            api.get('questao/listar-all').then(response => {\r\n                setQuestoes(response.data);\r\n            })\r\n            setOpen(false);\r\n        } catch (err) {\r\n            alert('Erro no cadastro, tente novamente.');\r\n        }\r\n    }\r\n\r\n\r\n    async function editQuestion(questao) {\r\n        if(!open) {\r\n            setOpen(true);\r\n        }\r\n        setDescricao(questao.descricao);\r\n        setCorreta(questao.correta);\r\n        switch(questao.tpQuestao) {\r\n            case 'Discursivas (formação geral)':\r\n                setIdTpQuestao(1);\r\n                break;\r\n            case 'Objetivas (formação geral)':\r\n                setIdTpQuestao(2);\r\n                break;\r\n            case 'Discursivas (componente específico)':\r\n                setIdTpQuestao(3);\r\n                break;\r\n            case 'objetivas (componente específico)':\r\n                setIdTpQuestao(4);\r\n                break;\r\n        }\r\n        \r\n        setAlternativaA(questao.alternativaA);\r\n        setAlternativaB(questao.alternativaB);\r\n        setAlternativaC(questao.alternativaC);\r\n        setAlternativaD(questao.alternativaD);\r\n        setAlternativaE(questao.alternativaE);\r\n        setQuestionEditing(questao);\r\n        setEditing(true);\r\n    }\r\n\r\n\r\n    function handleRegister(e) {\r\n        e.preventDefault(); \r\n        editing ? handleEdit(questionEditing) : handleAdd();\r\n        setDescricao('');\r\n        setCorreta('');\r\n        setIdTpQuestao(1);\r\n        setAlternativaA('');\r\n        setAlternativaB('');\r\n        setAlternativaC('');\r\n        setAlternativaD('');\r\n        setAlternativaE('');\r\n    }\r\n\r\n\r\n    async function anular(questao) {\r\n        let tipo = null;\r\n\r\n        switch(questao.tpQuestao) {\r\n            case 'Discursivas (formação geral)':\r\n                tipo = 1;\r\n                break;\r\n            case 'Objetivas (formação geral)':\r\n                tipo = 2;\r\n                break;\r\n            case 'Discursivas (componente específico)':\r\n                tipo = 3;\r\n                break;\r\n            case 'objetivas (componente específico)':\r\n                tipo = 4;\r\n                break;\r\n        }\r\n\r\n        const data = {\r\n            alternativaA: questao.alternativaA,\r\n            alternativaB: questao.alternativaB,\r\n            alternativaC: questao.alternativaC,\r\n            alternativaD: questao.alternativaD,\r\n            alternativaE: questao.alternativaE,\r\n            correta: questao.correta,\r\n            descricao: questao.descricao,\r\n            estadoQuestao: false,\r\n            idTpQuestao: tipo\r\n        }\r\n\r\n        try {\r\n            const response = await api.put(`questao/atualizar/${questao.idQuestao}`, data);\r\n            console.log('resp', response);\r\n            alert(`Questão anulada`);\r\n\r\n            api.get('questao/listar-all').then(response => {\r\n                setQuestoes(response.data);\r\n            })\r\n            setOpen(false);\r\n        } catch (err) {\r\n            alert('Erro ao alterar o estado da questão, tente novamente.');\r\n        }\r\n    }\r\n\r\n\r\n    async function validar(questao) {\r\n        let tipo = null;\r\n\r\n        switch(questao.tpQuestao) {\r\n            case 'Discursivas (formação geral)':\r\n                tipo = 1;\r\n                break;\r\n            case 'Objetivas (formação geral)':\r\n                tipo = 2;\r\n                break;\r\n            case 'Discursivas (componente específico)':\r\n                tipo = 3;\r\n                break;\r\n            case 'objetivas (componente específico)':\r\n                tipo = 4;\r\n                break;\r\n        }\r\n\r\n        const data = {\r\n            alternativaA: questao.alternativaA,\r\n            alternativaB: questao.alternativaB,\r\n            alternativaC: questao.alternativaC,\r\n            alternativaD: questao.alternativaD,\r\n            alternativaE: questao.alternativaE,\r\n            correta: questao.correta,\r\n            descricao: questao.descricao,\r\n            estadoQuestao: true,\r\n            idTpQuestao: tipo\r\n        }\r\n\r\n        try {\r\n            const response = await api.put(`questao/atualizar/${questao.idQuestao}`, data);\r\n            console.log('resp', response);\r\n            alert(`Questão validada`);\r\n\r\n            api.get('questao/listar-all').then(response => {\r\n                setQuestoes(response.data);\r\n            })\r\n            setOpen(false);\r\n        } catch (err) {\r\n            alert('Erro ao alterar o estado da questão, tente novamente.');\r\n        }\r\n    }\r\n\r\n\r\n    function selecionarQuestoesProva(data, questao) {        \r\n        if(data.checked) {\r\n            questoesProva.push(questao)\r\n        } else {\r\n            questoesProva = questoesProva.filter((questaoProva) => questaoProva.idQuestao !== data.id)\r\n        }\r\n    }\r\n\r\n\r\n    async function gerarProva() {\r\n        let day = format(new Date(), \"yyyy-MM-dd'T'HH:mm:ss\");\r\n\r\n        const idQuestoes = questoesProva.map((questaoProva) => questaoProva.idQuestao);\r\n\r\n        const data = {\r\n            dataProva: day,\r\n            idsQuestoes: idQuestoes\r\n        }\r\n\r\n        try {\r\n            const response = await api.put('prova/atualizar/1', data);\r\n            console.log('resp', response);\r\n            alert(`Prova cadastrada com sucesso!`);\r\n        } catch (err) {\r\n            alert('Erro no cadastro, tente novamente.');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeaderEnade />\r\n            <MenuEnade/> \r\n            <div className='alignButton'>\r\n                <Button className='buttonGerarProva' onClick={() => gerarProva()} >Gerar Prova</Button> \r\n                <Button className='buttonCadastrarQuestao' onClick={() => setOpen(true)}>Cadastrar Questão</Button>           \r\n            </div>\r\n            {console.log('quest', questoes)}\r\n            {questoes && questoes.map((questao) => {\r\n                return (\r\n                    <Card.Group className='divCards' key={questao.idQuestao}>\r\n                        <Card className={`${questao.estadoQuestao === true ? 'card' : 'cardAnulado'}`}>\r\n                        <Card.Content>\r\n                            <Icon name='edit' size='large' className='editIcon' type='button' onClick={() => editQuestion(questao)} />\r\n                            <Card.Header className='cardContent'>{`Pergunta: ${questao.descricao}`}</Card.Header>\r\n                            <Card.Meta className={`${questao.estadoQuestao === true ? 'cardContent' : 'cardContentAnulado'}`}>{`${questao.estadoQuestao === true ? 'Validada' : 'Anulada'}`}</Card.Meta>\r\n                            <If condition={questao.tpQuestao === 'Objetivas (formação geral)' || questao.tpQuestao === 'objetivas (componente específico)'}>\r\n                                <Card.Description className='cardContentAlt'>\r\n                                {`A) ${questao.alternativaA}`}<br />\r\n                                {`B) ${questao.alternativaB}`}<br />\r\n                                {`C) ${questao.alternativaC}`}<br />\r\n                                {`D) ${questao.alternativaD}`}<br />\r\n                                {`E) ${questao.alternativaE}`}\r\n                                </Card.Description>\r\n                            </If>\r\n                            <Card.Description className='cardContent'>\r\n                            {`Resposta: ${questao.correta}`}\r\n                            </Card.Description>\r\n                        </Card.Content>\r\n                        <Card.Content extra>\r\n                            <div className='cardActions'>\r\n                                <div>\r\n                                <Button negative className='actions1' disabled={questao.estadoQuestao === false} onClick={() => anular(questao)}>\r\n                                    Anular\r\n                                </Button>\r\n                                <Button positive className='actions2' disabled={questao.estadoQuestao === true} onClick={() => validar(questao)}>\r\n                                    Validar\r\n                                </Button>\r\n                                </div>\r\n                                <Checkbox label='Adicionar a prova' className='actions2' id={questao.idQuestao} onChange={(e, data) => selecionarQuestoesProva(data, questao)} />\r\n                            </div>\r\n                        </Card.Content>\r\n                        </Card>\r\n                    </Card.Group>\r\n                )\r\n            })}\r\n\r\n\r\n            <Modal\r\n                className='modalCadastrarQuestao'\r\n                onClose={() => setOpen(false)}\r\n                onOpen={() => setOpen(true)}\r\n                open={open}\r\n                >\r\n                <Modal.Header>Cadastrar Questão</Modal.Header>\r\n                <Modal.Content image>\r\n                    <Modal.Description>\r\n                        <form onSubmit={handleRegister} className='formQuestao'>\r\n                            <div className='inputs'>\r\n                                <Select placeholder='Selecione o tipo da questão' options={tipoOptions} className='selectCadastro' value={idTpQuestao} onChange={(e, data) => setIdTpQuestao(data.value)}/>\r\n                                <TextArea placeholder='Pergunta' style={{ minHeight: 100 }} className='inputCadastro' value={descricao} onChange={e => setDescricao(e.target.value)}/>\r\n                                <If condition={idTpQuestao === 1 || idTpQuestao === 3} >\r\n                                    <TextArea placeholder='Resposta' style={{ minHeight: 80 }} className='inputCadastro' value={correta} onChange={e => setCorreta(e.target.value)}/>\r\n                                </If>\r\n                                <If condition={idTpQuestao === 2 || idTpQuestao === 4} >\r\n                                    <Select placeholder='Selecione a alternativa correta' options={tipoOptionsResp} className='selectCadastro' value={correta} onChange={(e, data) => setCorreta(data.value)}/>\r\n                                </If>\r\n                                <div className='actionsModalQuestao'>\r\n                                    <Button className='buttonCancelarModal' onClick={() => setOpen(false) && setEditing(false)} >Cancelar</Button>\r\n                                    <Button className='buttonCadastrarModal' type='submit'>Cadastrar</Button>\r\n                                </div>\r\n                            </div>\r\n                            <If condition={idTpQuestao === 2 || idTpQuestao === 4} >\r\n                                {/* CONSERTAR IF PARA MOSTRAR ALTERNATIVAS */}\r\n                                <div className='alternativas'>\r\n                                    <Input placeholder='Alternativa A' className='inputCadastro' value={alternativaA} onChange={e => setAlternativaA(e.target.value)}/>\r\n                                    <Input placeholder='Alternativa B' className='inputCadastro' value={alternativaB} onChange={e => setAlternativaB(e.target.value)}/>\r\n                                    <Input placeholder='Alternativa C' className='inputCadastro' value={alternativaC} onChange={e => setAlternativaC(e.target.value)}/>\r\n                                    <Input placeholder='Alternativa D' className='inputCadastro' value={alternativaD} onChange={e => setAlternativaD(e.target.value)}/>\r\n                                    <Input placeholder='Alternativa E' className='inputCadastro' value={alternativaE} onChange={e => setAlternativaE(e.target.value)}/>\r\n                                </div>\r\n                            </If>\r\n                        </form>\r\n                    </Modal.Description>\r\n                </Modal.Content>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Professor;","C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\components\\HeaderEnade\\index.js",[],"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\Prova\\index.js",["82","83","84","85"],"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\Prova\\enums.js",[],"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\pages\\RelacaoAlunos\\index.js",["86","87","88"],"C:\\Users\\Raphaelli Bellini\\Desktop\\webDinamic\\web-dinamico\\src\\components\\If\\index.js",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":2,"column":8,"nodeType":"95","messageId":"96","endLine":2,"endColumn":18},{"ruleId":"93","severity":1,"message":"97","line":3,"column":16,"nodeType":"95","messageId":"96","endLine":3,"endColumn":22},{"ruleId":"93","severity":1,"message":"98","line":3,"column":24,"nodeType":"95","messageId":"96","endLine":3,"endColumn":28},{"ruleId":"93","severity":1,"message":"99","line":5,"column":8,"nodeType":"95","messageId":"96","endLine":5,"endColumn":19},{"ruleId":"89","replacedBy":"100"},{"ruleId":"91","replacedBy":"101"},{"ruleId":"93","severity":1,"message":"102","line":16,"column":27,"nodeType":"95","messageId":"96","endLine":16,"endColumn":43},{"ruleId":"93","severity":1,"message":"102","line":19,"column":27,"nodeType":"95","messageId":"96","endLine":19,"endColumn":43},{"ruleId":"103","severity":1,"message":"104","line":113,"column":9,"nodeType":"105","messageId":"106","endLine":126,"endColumn":10},{"ruleId":"103","severity":1,"message":"104","line":155,"column":9,"nodeType":"105","messageId":"106","endLine":168,"endColumn":10},{"ruleId":"103","severity":1,"message":"104","line":200,"column":9,"nodeType":"105","messageId":"106","endLine":213,"endColumn":10},{"ruleId":"93","severity":1,"message":"107","line":2,"column":24,"nodeType":"95","messageId":"96","endLine":2,"endColumn":32},{"ruleId":"93","severity":1,"message":"108","line":2,"column":41,"nodeType":"95","messageId":"96","endLine":2,"endColumn":47},{"ruleId":"93","severity":1,"message":"109","line":2,"column":59,"nodeType":"95","messageId":"96","endLine":2,"endColumn":64},{"ruleId":"93","severity":1,"message":"98","line":2,"column":66,"nodeType":"95","messageId":"96","endLine":2,"endColumn":70},{"ruleId":"93","severity":1,"message":"110","line":7,"column":10,"nodeType":"95","messageId":"96","endLine":7,"endColumn":16},{"ruleId":"93","severity":1,"message":"111","line":13,"column":28,"nodeType":"95","messageId":"96","endLine":13,"endColumn":45},{"ruleId":"112","severity":1,"message":"113","line":22,"column":8,"nodeType":"114","endLine":22,"endColumn":26,"suggestions":"115"},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"no-unused-vars","'logoBranco' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Icon' is defined but never used.","'HeaderEnade' is defined but never used.",["116"],["117"],"'setEstadoQuestao' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Checkbox' is defined but never used.","'Select' is defined but never used.","'Input' is defined but never used.","'render' is defined but never used.","'setAlunosSemProva' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'buscarAlunosCadastrados', 'buscarAlunosProva', and 'gerarGrafico'. Either include them or remove the dependency array.","ArrayExpression",["118"],"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},"Update the dependencies array to be: [buscarAlunosCadastrados, buscarAlunosProva, data, gerarGrafico, percentage]",{"range":"121","text":"122"},[833,851],"[buscarAlunosCadastrados, buscarAlunosProva, data, gerarGrafico, percentage]"]